<!DOCTYPE html>
<html lang="en">
<head>
<title>Process EOI</title>

<meta charset="utf-8" />
<meta name="description" content="project2"  />
<meta name="keywords" content="process eoi" />

<?php
require_once ('settings.php');
$conn = @mysqli_connect($host, $username, $pwd, $database);
// Function to sanitize input
function clean_input($data): string {
    return htmlspecialchars(string: stripslashes(string: trim(string: $data)));
}

// Capture user input
$jobRef = clean_input(data: $_POST['JobReferenceNumber']);
$firstName = clean_input(data: $_POST['FirstName']);
$lastName = clean_input(data: $_POST['LastName']);
$dateOfBirth = clean_input(data: $_POST['DateOfBirth']);
$gender = clean_input(data: $_POST['Gender']);
$streetAddress = clean_input(data: $_POST['StreetAddress']);
$suburb = clean_input(data: $_POST['Suburb']);
$state = clean_input(data: $_POST['State']);
$postcode = clean_input(data: $_POST['Postcode']);
$email = clean_input(data: $_POST['EmailAddress']);
$phone = clean_input(data: $_POST['PhoneNumber']);
$otherSkills = clean_input(data: $_POST['OtherSkills']);

// Validation
$errors = [];

if (!preg_match(pattern: "/^[A-Za-z0-9]{5}$/", subject: $jobRef)) {
    $errors[] = "Job Reference Number must be exactly 5 alphanumeric characters.";
}

if (!preg_match(pattern: "/^[A-Za-z]+$/", subject: $firstName) || strlen(string: $firstName) > 20) {
    $errors[] = "First name must contain only letters (max 20 characters).";
}

if (!preg_match(pattern: "/^[A-Za-z]+$/", subject: $lastName) || strlen(string: $lastName) > 20) {
    $errors[] = "Last name must contain only letters (max 20 characters).";
}

$age = date_diff(baseObject: date_create(datetime: $dateOfBirth), targetObject: date_create(datetime: 'today'))->y;
if ($age < 15 || $age > 80) {
    $errors[] = "Date of Birth must be between 15 and 80 years old.";
}

if (!in_array(needle: $state, haystack: ['VIC', 'NSW', 'QLD', 'NT', 'WA', 'SA', 'TAS', 'ACT'])) {
    $errors[] = "Invalid state selected.";
}

if (!preg_match(pattern: "/^[0-9]{4}$/", subject: $postcode)) {
    $errors[] = "Postcode must be exactly 4 digits.";
}

if (!filter_var(value: $email, filter: FILTER_VALIDATE_EMAIL)) {
    $errors[] = "Invalid email format.";
}

if (!preg_match(pattern: "/^[0-9 ]{8,12}$/", subject: $phone)) {
    $errors[] = "Phone number must be 8 to 12 digits or spaces.";
}

if (!filter_var($emailAddress, FILTER_VALIDATE_EMAIL)) {
    $errors[] = "Invalid email address format.";
}
    $createTableSQL = "CREATE TABLE IF NOT EXISTS EOInumber (
        id INT AUTO_INCREMENT PRIMARY KEY,
        job_reference_number VARCHAR(5) NOT NULL,
        first_name VARCHAR(20) NOT NULL,
        last_name VARCHAR(20) NOT NULL,
        date_of_birth DATE,
        gender ENUM('Male', 'Female', 'Other'),
        street_address VARCHAR(40),
        suburb_town VARCHAR(40),
        state ENUM('VIC', 'NSW', 'QLD', 'NT', 'WA', 'SA', 'TAS', 'ACT'),
        postcode CHAR(4),
        email_address VARCHAR(255),
        phone_number VARCHAR(20),
        required_skills VARCHAR(255),
        other_skills TEXT
    )";

    if ($conn->query($createTableSQL) === TRUE) {
        // Insert data into the EOI table
        $insertSQL = "INSERT INTO EOInumber (job_reference_number, first_name, last_name, date_of_birth, gender, street_address, suburb_town, state, postcode, email_address, phone_number, required_skills, other_skills)
        VALUES ('$jobReferenceNumber', '$firstName', '$lastName', '$dateOfBirth', '$gender', '$streetAddress', '$suburbTown', '$state', '$postcode', '$emailAddress', '$phoneNumber', '$requiredSkills', '$otherSkills')";

        if ($conn->query($insertSQL) === TRUE) {
            $autoGeneratedID = $conn->insert_id;
            echo "<h2>EOI submitted successfully!</h2>";
            echo "<p>Your unique EOInumber: $autoGeneratedID</p>";
        } else {
            echo "Error: " . $conn->error;
        }
    }

?>
